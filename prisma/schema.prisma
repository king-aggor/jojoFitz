// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//admin model
model Admin {
  id       String @id @default(cuid())
  email    String @unique
  password String
}

// custom model
model Customer {
  id          String  @id @default(cuid())
  email       String  @unique
  firstName   String
  lastName    String
  address     String
  password    String
  phoneNumber String
  cart        Cart?   @relation()
  cartId      String? @unique
  orders      Order[]
}

// product model
model Product {
  id          String   @id @default(cuid())
  name        String
  quantity    Int
  price       Float
  description String
  createdAt   DateTime @default(now())
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  orders      Order[]
}

// category model
model Category {
  id      String    @id @default(cuid())
  name    String
  Product Product[]
}

// cart Model
model Cart {
  id         String   @id @default(cuid())
  products   Json[]
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @unique
  // orders     Order[]
}

// order model
model Order {
  id          String      @id @default(cuid())
  // quantity   Int
  status      orderStatus @default(pending)
  address     String
  orderItems  Json[]
  totalAmount Float
  Customer    Customer?   @relation(fields: [customerId], references: [id])
  customerId  String?
  products    Product[]
  payment     Payment?    @relation(fields: [paymentRef], references: [ref])
  paymentRef  String?     @unique
  // cart        Cart?       @relation(fields: [cartId], references: [id])
  // cartId      String?     @unique
}

// payment model
model Payment {
  ref        String        @id
  amountPaid Float?
  status     paymentStatus @default(pending)
  method     String?
  Order      Order?
}

// courier model
model Courier {
  id        String @id @default(cuid())
  firstName String
  lastName  String
}

enum orderStatus {
  pending
  processing
  onRoute
  delivered
  cancelled
}

enum paymentStatus {
  pending
  successful
  failed
}
